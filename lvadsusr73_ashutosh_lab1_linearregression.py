# -*- coding: utf-8 -*-
"""LVADSUSR73_Ashutosh_Lab1_LinearRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xcrr5U-j0q5oJXKks4Cy2Xalcmc-lnG1
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from scipy import stats

from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import OneHotEncoder
from scipy import stats

# Q1
df=pd.read_csv('/content/expenses.csv')
df.head()

df.shape

df.info()

sns.countplot(df['sex'].value_counts())

sns.countplot(df['smoker'].value_counts())

# Managing null values
df.isnull().sum()
print("Dataset dont have any null values")

# checking for outliers
sns.boxplot(df[['age','bmi', 'children', 'charges']])

# removing the outliers

def detect_outliers_iqr(data):
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    outliers = (data < lower_bound) | (data > upper_bound)
    return outliers


def remove_outliers_iqr(data):
    outliers = detect_outliers_iqr(data)
    data_cleaned = data[~outliers]
    return data_cleaned


numerical_variables = ['age', 'bmi', 'children', 'charges']
for variable in numerical_variables:
    df = df[~detect_outliers_iqr(df[variable])]


print("Shape of the data after removing outliers:", df.shape)

#after removal of outliers
sns.boxplot(df[['age','bmi', 'children', 'charges']])

data_encoded = df.copy()
le = LabelEncoder()

# Encoding categorical columns
categorical_columns = ['sex', 'smoker', 'region']
for col in categorical_columns:
    data_encoded[col] = le.fit_transform(data_encoded[col])

# Displaying the encoded dataset
print(data_encoded.head())
df=data_encoded

df.head()

correlation_with_target = df.corr()['charges'].sort_values(ascending=False)
print("Correlation with target variable ('charges'):")
print(correlation_with_target)


print("Shape of the data after data cleaning:", df.shape)

sns.heatmap(df.corr(),annot=True)

#Q4
y=df.iloc[:,3]
print(y)
df=df.drop('charges',axis=1)

x=df

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.5,random_state=42)

#Q5 model Development
lr=LinearRegression()

lr.fit(x_train,y_train)

pred=lr.predict(x_test)

# Q6 Model Evaluation
from sklearn.metrics import mean_squared_error, r2_score

mse = mean_squared_error(y_test, pred)

rmse=np.sqrt(mse)

r2 = r2_score(y_test, pred)

print("The Mean Squared Error is ",mse)
print("The Root Mean Squared Error is ",rmse)
print("The R squared value is ",r2)

plt.scatter(y_test,pred)