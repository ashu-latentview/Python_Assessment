# -*- coding: utf-8 -*-
"""LVADSUSR73_Ashutosh_Lab2_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15OV0qiZoIRw8cJuVYNw4FQe8_TFRS6QN
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

# Q1
df=pd.read_csv('booking.csv')
df.head()

df.shape

# checking for null values
df.isnull().sum()
df.dropna()

print("There is no null values in the dataset")

fig, axs = plt.subplots(4, figsize=(5, 10))

sns.boxplot(df['number of adults'], ax=axs[0]).set_title('Number of Adults Distribution')
sns.boxplot(df['number of children'], ax=axs[1]).set_title('Number of Children Distribution')
sns.boxplot(df['lead time'], ax=axs[2]).set_title('Lead Time Distribution')
sns.boxplot(df['average price'], ax=axs[3]).set_title('Average Price Distribution')

plt.tight_layout()
plt.show()

# outliers
def detect_outliers_iqr(data):
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return (data < lower_bound) | (data > upper_bound)

outliers = detect_outliers_iqr(df[['number of adults', 'number of children', 'lead time', 'average price']])
df = df[~outliers.any(axis=1)]

df.shape

data_encoded = df.copy()

label_encoder = LabelEncoder()
categorical_columns = ['type of meal', 'room type','market segment type', 'booking status']
for col in categorical_columns:
    data_encoded[col] = label_encoder.fit_transform(data_encoded[col])

print(data_encoded.head())
df=data_encoded

from sklearn.model_selection import train_test_split
y=df.iloc[:,-1]
x=df.iloc[:,1:-2]
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)

print(x)

lr=LogisticRegression(max_iter=10000)

lr.fit(x_train,y_train)

pred=lr.predict(x_test)

from sklearn.metrics import accuracy_score,recall_score,precision_score,f1_score

acc=accuracy_score(pred,y_test)

from sklearn.metrics import confusion_matrix
confusion_matrix(pred,y_test)

sns.heatmap(confusion_matrix(pred,y_test),annot=True)

rec=recall_score(pred,y_test)

prec=precision_score(pred,y_test)

f1=f1_score(pred,y_test)

print("Accuracy of the model is ",acc)
print("Reacll of the model is ",rec)
print("Precision of the model is ",prec)
print("F1-score of the model is ",f1)